# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class ChallengeInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, challengeid: str=None, eventid: str=None, name: str=None, depth: int=None, modified: datetime=None):  # noqa: E501
        """ChallengeInfo - a model defined in Swagger

        :param challengeid: The challengeid of this ChallengeInfo.  # noqa: E501
        :type challengeid: str
        :param eventid: The eventid of this ChallengeInfo.  # noqa: E501
        :type eventid: str
        :param name: The name of this ChallengeInfo.  # noqa: E501
        :type name: str
        :param depth: The depth of this ChallengeInfo.  # noqa: E501
        :type depth: int
        :param modified: The modified of this ChallengeInfo.  # noqa: E501
        :type modified: datetime
        """
        self.swagger_types = {
            'challengeid': str,
            'eventid': str,
            'name': str,
            'depth': int,
            'modified': datetime
        }

        self.attribute_map = {
            'challengeid': 'challengeid',
            'eventid': 'eventid',
            'name': 'name',
            'depth': 'depth',
            'modified': 'modified'
        }

        self._challengeid = challengeid
        self._eventid = eventid
        self._name = name
        self._depth = depth
        self._modified = modified

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeInfo of this ChallengeInfo.  # noqa: E501
        :rtype: ChallengeInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challengeid(self) -> str:
        """Gets the challengeid of this ChallengeInfo.

        the challenge identifier  # noqa: E501

        :return: The challengeid of this ChallengeInfo.
        :rtype: str
        """
        return self._challengeid

    @challengeid.setter
    def challengeid(self, challengeid: str):
        """Sets the challengeid of this ChallengeInfo.

        the challenge identifier  # noqa: E501

        :param challengeid: The challengeid of this ChallengeInfo.
        :type challengeid: str
        """

        self._challengeid = challengeid

    @property
    def eventid(self) -> str:
        """Gets the eventid of this ChallengeInfo.

        the event identifier that this challenge is associated with  # noqa: E501

        :return: The eventid of this ChallengeInfo.
        :rtype: str
        """
        return self._eventid

    @eventid.setter
    def eventid(self, eventid: str):
        """Sets the eventid of this ChallengeInfo.

        the event identifier that this challenge is associated with  # noqa: E501

        :param eventid: The eventid of this ChallengeInfo.
        :type eventid: str
        """

        self._eventid = eventid

    @property
    def name(self) -> str:
        """Gets the name of this ChallengeInfo.

        the challenge name  # noqa: E501

        :return: The name of this ChallengeInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChallengeInfo.

        the challenge name  # noqa: E501

        :param name: The name of this ChallengeInfo.
        :type name: str
        """

        self._name = name

    @property
    def depth(self) -> int:
        """Gets the depth of this ChallengeInfo.

        the depth of the bracket, the max number of entries would be 2^depth  # noqa: E501

        :return: The depth of this ChallengeInfo.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth: int):
        """Sets the depth of this ChallengeInfo.

        the depth of the bracket, the max number of entries would be 2^depth  # noqa: E501

        :param depth: The depth of this ChallengeInfo.
        :type depth: int
        """

        self._depth = depth

    @property
    def modified(self) -> datetime:
        """Gets the modified of this ChallengeInfo.

        the mod time  # noqa: E501

        :return: The modified of this ChallengeInfo.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified: datetime):
        """Sets the modified of this ChallengeInfo.

        the mod time  # noqa: E501

        :param modified: The modified of this ChallengeInfo.
        :type modified: datetime
        """

        self._modified = modified

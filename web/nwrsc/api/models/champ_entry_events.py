# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class ChampEntryEvents(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, eventdate: str=None, drop: bool=None, points: float=None):  # noqa: E501
        """ChampEntryEvents - a model defined in Swagger

        :param eventdate: The eventdate of this ChampEntryEvents.  # noqa: E501
        :type eventdate: str
        :param drop: The drop of this ChampEntryEvents.  # noqa: E501
        :type drop: bool
        :param points: The points of this ChampEntryEvents.  # noqa: E501
        :type points: float
        """
        self.swagger_types = {
            'eventdate': str,
            'drop': bool,
            'points': float
        }

        self.attribute_map = {
            'eventdate': 'eventdate',
            'drop': 'drop',
            'points': 'points'
        }

        self._eventdate = eventdate
        self._drop = drop
        self._points = points

    @classmethod
    def from_dict(cls, dikt) -> 'ChampEntryEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChampEntry_events of this ChampEntryEvents.  # noqa: E501
        :rtype: ChampEntryEvents
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eventdate(self) -> str:
        """Gets the eventdate of this ChampEntryEvents.

        the date of the event  # noqa: E501

        :return: The eventdate of this ChampEntryEvents.
        :rtype: str
        """
        return self._eventdate

    @eventdate.setter
    def eventdate(self, eventdate: str):
        """Sets the eventdate of this ChampEntryEvents.

        the date of the event  # noqa: E501

        :param eventdate: The eventdate of this ChampEntryEvents.
        :type eventdate: str
        """

        self._eventdate = eventdate

    @property
    def drop(self) -> bool:
        """Gets the drop of this ChampEntryEvents.

        true if this event was dropped from the final calculation  # noqa: E501

        :return: The drop of this ChampEntryEvents.
        :rtype: bool
        """
        return self._drop

    @drop.setter
    def drop(self, drop: bool):
        """Sets the drop of this ChampEntryEvents.

        true if this event was dropped from the final calculation  # noqa: E501

        :param drop: The drop of this ChampEntryEvents.
        :type drop: bool
        """

        self._drop = drop

    @property
    def points(self) -> float:
        """Gets the points of this ChampEntryEvents.

        the points earned at this event  # noqa: E501

        :return: The points of this ChampEntryEvents.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points: float):
        """Sets the points of this ChampEntryEvents.

        the points earned at this event  # noqa: E501

        :param points: The points of this ChampEntryEvents.
        :type points: float
        """

        self._points = points

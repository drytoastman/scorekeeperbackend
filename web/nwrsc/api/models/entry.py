# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class Entry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, last_name: str=None, member_no: str=None, _class: str=None, index: str=None, pos: str=None, car_model: str=None, car_no: str=None, total_tm: str=None):  # noqa: E501
        """Entry - a model defined in Swagger

        :param first_name: The first_name of this Entry.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Entry.  # noqa: E501
        :type last_name: str
        :param member_no: The member_no of this Entry.  # noqa: E501
        :type member_no: str
        :param _class: The _class of this Entry.  # noqa: E501
        :type _class: str
        :param index: The index of this Entry.  # noqa: E501
        :type index: str
        :param pos: The pos of this Entry.  # noqa: E501
        :type pos: str
        :param car_model: The car_model of this Entry.  # noqa: E501
        :type car_model: str
        :param car_no: The car_no of this Entry.  # noqa: E501
        :type car_no: str
        :param total_tm: The total_tm of this Entry.  # noqa: E501
        :type total_tm: str
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'member_no': str,
            '_class': str,
            'index': str,
            'pos': str,
            'car_model': str,
            'car_no': str,
            'total_tm': str
        }

        self.attribute_map = {
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'member_no': 'MemberNo',
            '_class': 'Class',
            'index': 'Index',
            'pos': 'Pos',
            'car_model': 'CarModel',
            'car_no': 'CarNo',
            'total_tm': 'TotalTm'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._member_no = member_no
        self.__class = _class
        self._index = index
        self._pos = pos
        self._car_model = car_model
        self._car_no = car_no
        self._total_tm = total_tm

    @classmethod
    def from_dict(cls, dikt) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entry of this Entry.  # noqa: E501
        :rtype: Entry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Entry.


        :return: The first_name of this Entry.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Entry.


        :param first_name: The first_name of this Entry.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Entry.


        :return: The last_name of this Entry.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Entry.


        :param last_name: The last_name of this Entry.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def member_no(self) -> str:
        """Gets the member_no of this Entry.


        :return: The member_no of this Entry.
        :rtype: str
        """
        return self._member_no

    @member_no.setter
    def member_no(self, member_no: str):
        """Sets the member_no of this Entry.


        :param member_no: The member_no of this Entry.
        :type member_no: str
        """

        self._member_no = member_no

    @property
    def _class(self) -> str:
        """Gets the _class of this Entry.


        :return: The _class of this Entry.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this Entry.


        :param _class: The _class of this Entry.
        :type _class: str
        """

        self.__class = _class

    @property
    def index(self) -> str:
        """Gets the index of this Entry.


        :return: The index of this Entry.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index: str):
        """Sets the index of this Entry.


        :param index: The index of this Entry.
        :type index: str
        """

        self._index = index

    @property
    def pos(self) -> str:
        """Gets the pos of this Entry.


        :return: The pos of this Entry.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos: str):
        """Sets the pos of this Entry.


        :param pos: The pos of this Entry.
        :type pos: str
        """

        self._pos = pos

    @property
    def car_model(self) -> str:
        """Gets the car_model of this Entry.


        :return: The car_model of this Entry.
        :rtype: str
        """
        return self._car_model

    @car_model.setter
    def car_model(self, car_model: str):
        """Sets the car_model of this Entry.


        :param car_model: The car_model of this Entry.
        :type car_model: str
        """

        self._car_model = car_model

    @property
    def car_no(self) -> str:
        """Gets the car_no of this Entry.


        :return: The car_no of this Entry.
        :rtype: str
        """
        return self._car_no

    @car_no.setter
    def car_no(self, car_no: str):
        """Sets the car_no of this Entry.


        :param car_no: The car_no of this Entry.
        :type car_no: str
        """

        self._car_no = car_no

    @property
    def total_tm(self) -> str:
        """Gets the total_tm of this Entry.


        :return: The total_tm of this Entry.
        :rtype: str
        """
        return self._total_tm

    @total_tm.setter
    def total_tm(self, total_tm: str):
        """Sets the total_tm of this Entry.


        :param total_tm: The total_tm of this Entry.
        :type total_tm: str
        """

        self._total_tm = total_tm

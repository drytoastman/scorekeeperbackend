# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api.models.champ_entry_events import ChampEntryEvents  # noqa: F401,E501
from nwrsc.api import util


class ChampEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, driverid: str=None, firstname: str=None, lastname: str=None, eventcount: int=None, position: int=None, points: float=None, events: List[ChampEntryEvents]=None, tiebreakers: List[int]=None):  # noqa: E501
        """ChampEntry - a model defined in Swagger

        :param driverid: The driverid of this ChampEntry.  # noqa: E501
        :type driverid: str
        :param firstname: The firstname of this ChampEntry.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this ChampEntry.  # noqa: E501
        :type lastname: str
        :param eventcount: The eventcount of this ChampEntry.  # noqa: E501
        :type eventcount: int
        :param position: The position of this ChampEntry.  # noqa: E501
        :type position: int
        :param points: The points of this ChampEntry.  # noqa: E501
        :type points: float
        :param events: The events of this ChampEntry.  # noqa: E501
        :type events: List[ChampEntryEvents]
        :param tiebreakers: The tiebreakers of this ChampEntry.  # noqa: E501
        :type tiebreakers: List[int]
        """
        self.swagger_types = {
            'driverid': str,
            'firstname': str,
            'lastname': str,
            'eventcount': int,
            'position': int,
            'points': float,
            'events': List[ChampEntryEvents],
            'tiebreakers': List[int]
        }

        self.attribute_map = {
            'driverid': 'driverid',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'eventcount': 'eventcount',
            'position': 'position',
            'points': 'points',
            'events': 'events',
            'tiebreakers': 'tiebreakers'
        }

        self._driverid = driverid
        self._firstname = firstname
        self._lastname = lastname
        self._eventcount = eventcount
        self._position = position
        self._points = points
        self._events = events
        self._tiebreakers = tiebreakers

    @classmethod
    def from_dict(cls, dikt) -> 'ChampEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChampEntry of this ChampEntry.  # noqa: E501
        :rtype: ChampEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driverid(self) -> str:
        """Gets the driverid of this ChampEntry.

        the unique driver identifier  # noqa: E501

        :return: The driverid of this ChampEntry.
        :rtype: str
        """
        return self._driverid

    @driverid.setter
    def driverid(self, driverid: str):
        """Sets the driverid of this ChampEntry.

        the unique driver identifier  # noqa: E501

        :param driverid: The driverid of this ChampEntry.
        :type driverid: str
        """

        self._driverid = driverid

    @property
    def firstname(self) -> str:
        """Gets the firstname of this ChampEntry.

        the driver first name  # noqa: E501

        :return: The firstname of this ChampEntry.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this ChampEntry.

        the driver first name  # noqa: E501

        :param firstname: The firstname of this ChampEntry.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this ChampEntry.

        the driver last name  # noqa: E501

        :return: The lastname of this ChampEntry.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this ChampEntry.

        the driver last name  # noqa: E501

        :param lastname: The lastname of this ChampEntry.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def eventcount(self) -> int:
        """Gets the eventcount of this ChampEntry.

        the number of events attended  # noqa: E501

        :return: The eventcount of this ChampEntry.
        :rtype: int
        """
        return self._eventcount

    @eventcount.setter
    def eventcount(self, eventcount: int):
        """Sets the eventcount of this ChampEntry.

        the number of events attended  # noqa: E501

        :param eventcount: The eventcount of this ChampEntry.
        :type eventcount: int
        """

        self._eventcount = eventcount

    @property
    def position(self) -> int:
        """Gets the position of this ChampEntry.

        the finishing position, if enough events were attended, no value otherwise  # noqa: E501

        :return: The position of this ChampEntry.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position: int):
        """Sets the position of this ChampEntry.

        the finishing position, if enough events were attended, no value otherwise  # noqa: E501

        :param position: The position of this ChampEntry.
        :type position: int
        """

        self._position = position

    @property
    def points(self) -> float:
        """Gets the points of this ChampEntry.

        the final tally of points  # noqa: E501

        :return: The points of this ChampEntry.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points: float):
        """Sets the points of this ChampEntry.

        the final tally of points  # noqa: E501

        :param points: The points of this ChampEntry.
        :type points: float
        """

        self._points = points

    @property
    def events(self) -> List[ChampEntryEvents]:
        """Gets the events of this ChampEntry.


        :return: The events of this ChampEntry.
        :rtype: List[ChampEntryEvents]
        """
        return self._events

    @events.setter
    def events(self, events: List[ChampEntryEvents]):
        """Sets the events of this ChampEntry.


        :param events: The events of this ChampEntry.
        :type events: List[ChampEntryEvents]
        """

        self._events = events

    @property
    def tiebreakers(self) -> List[int]:
        """Gets the tiebreakers of this ChampEntry.

        the number of times finishing 1st, 2nd, 3rd and 4th.  Used for tiebreakers.  # noqa: E501

        :return: The tiebreakers of this ChampEntry.
        :rtype: List[int]
        """
        return self._tiebreakers

    @tiebreakers.setter
    def tiebreakers(self, tiebreakers: List[int]):
        """Sets the tiebreakers of this ChampEntry.

        the number of times finishing 1st, 2nd, 3rd and 4th.  Used for tiebreakers.  # noqa: E501

        :param tiebreakers: The tiebreakers of this ChampEntry.
        :type tiebreakers: List[int]
        """

        self._tiebreakers = tiebreakers

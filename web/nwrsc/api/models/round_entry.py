# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api.models.run import Run  # noqa: F401,E501
from nwrsc.api import util


class RoundEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, carid: str=None, firstname: str=None, lastname: str=None, classcode: str=None, indexcode: str=None, dial: float=None, left: Run=None, right: Run=None, result: float=None, newdial: float=None):  # noqa: E501
        """RoundEntry - a model defined in Swagger

        :param carid: The carid of this RoundEntry.  # noqa: E501
        :type carid: str
        :param firstname: The firstname of this RoundEntry.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this RoundEntry.  # noqa: E501
        :type lastname: str
        :param classcode: The classcode of this RoundEntry.  # noqa: E501
        :type classcode: str
        :param indexcode: The indexcode of this RoundEntry.  # noqa: E501
        :type indexcode: str
        :param dial: The dial of this RoundEntry.  # noqa: E501
        :type dial: float
        :param left: The left of this RoundEntry.  # noqa: E501
        :type left: Run
        :param right: The right of this RoundEntry.  # noqa: E501
        :type right: Run
        :param result: The result of this RoundEntry.  # noqa: E501
        :type result: float
        :param newdial: The newdial of this RoundEntry.  # noqa: E501
        :type newdial: float
        """
        self.swagger_types = {
            'carid': str,
            'firstname': str,
            'lastname': str,
            'classcode': str,
            'indexcode': str,
            'dial': float,
            'left': Run,
            'right': Run,
            'result': float,
            'newdial': float
        }

        self.attribute_map = {
            'carid': 'carid',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'classcode': 'classcode',
            'indexcode': 'indexcode',
            'dial': 'dial',
            'left': 'left',
            'right': 'right',
            'result': 'result',
            'newdial': 'newdial'
        }

        self._carid = carid
        self._firstname = firstname
        self._lastname = lastname
        self._classcode = classcode
        self._indexcode = indexcode
        self._dial = dial
        self._left = left
        self._right = right
        self._result = result
        self._newdial = newdial

    @classmethod
    def from_dict(cls, dikt) -> 'RoundEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoundEntry of this RoundEntry.  # noqa: E501
        :rtype: RoundEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carid(self) -> str:
        """Gets the carid of this RoundEntry.

        the car identifier of the entrant  # noqa: E501

        :return: The carid of this RoundEntry.
        :rtype: str
        """
        return self._carid

    @carid.setter
    def carid(self, carid: str):
        """Sets the carid of this RoundEntry.

        the car identifier of the entrant  # noqa: E501

        :param carid: The carid of this RoundEntry.
        :type carid: str
        """

        self._carid = carid

    @property
    def firstname(self) -> str:
        """Gets the firstname of this RoundEntry.

        entrant first name  # noqa: E501

        :return: The firstname of this RoundEntry.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this RoundEntry.

        entrant first name  # noqa: E501

        :param firstname: The firstname of this RoundEntry.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this RoundEntry.

        entrant last name  # noqa: E501

        :return: The lastname of this RoundEntry.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this RoundEntry.

        entrant last name  # noqa: E501

        :param lastname: The lastname of this RoundEntry.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def classcode(self) -> str:
        """Gets the classcode of this RoundEntry.

        the class of the entrant  # noqa: E501

        :return: The classcode of this RoundEntry.
        :rtype: str
        """
        return self._classcode

    @classcode.setter
    def classcode(self, classcode: str):
        """Sets the classcode of this RoundEntry.

        the class of the entrant  # noqa: E501

        :param classcode: The classcode of this RoundEntry.
        :type classcode: str
        """

        self._classcode = classcode

    @property
    def indexcode(self) -> str:
        """Gets the indexcode of this RoundEntry.

        the index of the entrant  # noqa: E501

        :return: The indexcode of this RoundEntry.
        :rtype: str
        """
        return self._indexcode

    @indexcode.setter
    def indexcode(self, indexcode: str):
        """Sets the indexcode of this RoundEntry.

        the index of the entrant  # noqa: E501

        :param indexcode: The indexcode of this RoundEntry.
        :type indexcode: str
        """

        self._indexcode = indexcode

    @property
    def dial(self) -> float:
        """Gets the dial of this RoundEntry.

        the incoming dialin for this entrant, the first round is calculated from event results, later rounds are the newdial carried forward  # noqa: E501

        :return: The dial of this RoundEntry.
        :rtype: float
        """
        return self._dial

    @dial.setter
    def dial(self, dial: float):
        """Sets the dial of this RoundEntry.

        the incoming dialin for this entrant, the first round is calculated from event results, later rounds are the newdial carried forward  # noqa: E501

        :param dial: The dial of this RoundEntry.
        :type dial: float
        """

        self._dial = dial

    @property
    def left(self) -> Run:
        """Gets the left of this RoundEntry.

        the left run of the entrant for this round  # noqa: E501

        :return: The left of this RoundEntry.
        :rtype: Run
        """
        return self._left

    @left.setter
    def left(self, left: Run):
        """Sets the left of this RoundEntry.

        the left run of the entrant for this round  # noqa: E501

        :param left: The left of this RoundEntry.
        :type left: Run
        """

        self._left = left

    @property
    def right(self) -> Run:
        """Gets the right of this RoundEntry.

        the right run of the entrant for this round  # noqa: E501

        :return: The right of this RoundEntry.
        :rtype: Run
        """
        return self._right

    @right.setter
    def right(self, right: Run):
        """Sets the right of this RoundEntry.

        the right run of the entrant for this round  # noqa: E501

        :param right: The right of this RoundEntry.
        :type right: Run
        """

        self._right = right

    @property
    def result(self) -> float:
        """Gets the result of this RoundEntry.

        the final difference value, (leftnet + rightnet) - (2*dial)  # noqa: E501

        :return: The result of this RoundEntry.
        :rtype: float
        """
        return self._result

    @result.setter
    def result(self, result: float):
        """Sets the result of this RoundEntry.

        the final difference value, (leftnet + rightnet) - (2*dial)  # noqa: E501

        :param result: The result of this RoundEntry.
        :type result: float
        """

        self._result = result

    @property
    def newdial(self) -> float:
        """Gets the newdial of this RoundEntry.

        the dial for the next round, either the original dial or a calculated breakout if the round result was negative  # noqa: E501

        :return: The newdial of this RoundEntry.
        :rtype: float
        """
        return self._newdial

    @newdial.setter
    def newdial(self, newdial: float):
        """Sets the newdial of this RoundEntry.

        the dial for the next round, either the original dial or a calculated breakout if the round result was negative  # noqa: E501

        :param newdial: The newdial of this RoundEntry.
        :type newdial: float
        """

        self._newdial = newdial

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api.models.class_info import ClassInfo  # noqa: F401,E501
from nwrsc.api.models.event_info import EventInfo  # noqa: F401,E501
from nwrsc.api.models.index_info import IndexInfo  # noqa: F401,E501
from nwrsc.api.models.series_settings import SeriesSettings  # noqa: F401,E501
from nwrsc.api import util


class SeriesInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, settings: SeriesSettings=None, events: List[EventInfo]=None, challenges: List[str]=None, classes: List[ClassInfo]=None, indexes: List[IndexInfo]=None):  # noqa: E501
        """SeriesInfo - a model defined in Swagger

        :param settings: The settings of this SeriesInfo.  # noqa: E501
        :type settings: SeriesSettings
        :param events: The events of this SeriesInfo.  # noqa: E501
        :type events: List[EventInfo]
        :param challenges: The challenges of this SeriesInfo.  # noqa: E501
        :type challenges: List[str]
        :param classes: The classes of this SeriesInfo.  # noqa: E501
        :type classes: List[ClassInfo]
        :param indexes: The indexes of this SeriesInfo.  # noqa: E501
        :type indexes: List[IndexInfo]
        """
        self.swagger_types = {
            'settings': SeriesSettings,
            'events': List[EventInfo],
            'challenges': List[str],
            'classes': List[ClassInfo],
            'indexes': List[IndexInfo]
        }

        self.attribute_map = {
            'settings': 'settings',
            'events': 'events',
            'challenges': 'challenges',
            'classes': 'classes',
            'indexes': 'indexes'
        }

        self._settings = settings
        self._events = events
        self._challenges = challenges
        self._classes = classes
        self._indexes = indexes

    @classmethod
    def from_dict(cls, dikt) -> 'SeriesInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SeriesInfo of this SeriesInfo.  # noqa: E501
        :rtype: SeriesInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def settings(self) -> SeriesSettings:
        """Gets the settings of this SeriesInfo.


        :return: The settings of this SeriesInfo.
        :rtype: SeriesSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: SeriesSettings):
        """Sets the settings of this SeriesInfo.


        :param settings: The settings of this SeriesInfo.
        :type settings: SeriesSettings
        """

        self._settings = settings

    @property
    def events(self) -> List[EventInfo]:
        """Gets the events of this SeriesInfo.


        :return: The events of this SeriesInfo.
        :rtype: List[EventInfo]
        """
        return self._events

    @events.setter
    def events(self, events: List[EventInfo]):
        """Sets the events of this SeriesInfo.


        :param events: The events of this SeriesInfo.
        :type events: List[EventInfo]
        """

        self._events = events

    @property
    def challenges(self) -> List[str]:
        """Gets the challenges of this SeriesInfo.


        :return: The challenges of this SeriesInfo.
        :rtype: List[str]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges: List[str]):
        """Sets the challenges of this SeriesInfo.


        :param challenges: The challenges of this SeriesInfo.
        :type challenges: List[str]
        """

        self._challenges = challenges

    @property
    def classes(self) -> List[ClassInfo]:
        """Gets the classes of this SeriesInfo.


        :return: The classes of this SeriesInfo.
        :rtype: List[ClassInfo]
        """
        return self._classes

    @classes.setter
    def classes(self, classes: List[ClassInfo]):
        """Sets the classes of this SeriesInfo.


        :param classes: The classes of this SeriesInfo.
        :type classes: List[ClassInfo]
        """

        self._classes = classes

    @property
    def indexes(self) -> List[IndexInfo]:
        """Gets the indexes of this SeriesInfo.


        :return: The indexes of this SeriesInfo.
        :rtype: List[IndexInfo]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes: List[IndexInfo]):
        """Sets the indexes of this SeriesInfo.


        :param indexes: The indexes of this SeriesInfo.
        :type indexes: List[IndexInfo]
        """

        self._indexes = indexes

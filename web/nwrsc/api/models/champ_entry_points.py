# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class ChampEntryPoints(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, total: float=None, drop: List[str]=None, events: str=None):  # noqa: E501
        """ChampEntryPoints - a model defined in Swagger

        :param total: The total of this ChampEntryPoints.  # noqa: E501
        :type total: float
        :param drop: The drop of this ChampEntryPoints.  # noqa: E501
        :type drop: List[str]
        :param events: The events of this ChampEntryPoints.  # noqa: E501
        :type events: str
        """
        self.swagger_types = {
            'total': float,
            'drop': List[str],
            'events': str
        }

        self.attribute_map = {
            'total': 'total',
            'drop': 'drop',
            'events': 'events'
        }

        self._total = total
        self._drop = drop
        self._events = events

    @classmethod
    def from_dict(cls, dikt) -> 'ChampEntryPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChampEntry_points of this ChampEntryPoints.  # noqa: E501
        :rtype: ChampEntryPoints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self) -> float:
        """Gets the total of this ChampEntryPoints.

        the final tally of points  # noqa: E501

        :return: The total of this ChampEntryPoints.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this ChampEntryPoints.

        the final tally of points  # noqa: E501

        :param total: The total of this ChampEntryPoints.
        :type total: float
        """

        self._total = total

    @property
    def drop(self) -> List[str]:
        """Gets the drop of this ChampEntryPoints.

        array of event indicators that were dropped from the final calculation  # noqa: E501

        :return: The drop of this ChampEntryPoints.
        :rtype: List[str]
        """
        return self._drop

    @drop.setter
    def drop(self, drop: List[str]):
        """Sets the drop of this ChampEntryPoints.

        array of event indicators that were dropped from the final calculation  # noqa: E501

        :param drop: The drop of this ChampEntryPoints.
        :type drop: List[str]
        """

        self._drop = drop

    @property
    def events(self) -> str:
        """Gets the events of this ChampEntryPoints.

        the points tallied for each event in the series  # noqa: E501

        :return: The events of this ChampEntryPoints.
        :rtype: str
        """
        return self._events

    @events.setter
    def events(self, events: str):
        """Sets the events of this ChampEntryPoints.

        the points tallied for each event in the series  # noqa: E501

        :param events: The events of this ChampEntryPoints.
        :type events: str
        """

        self._events = events

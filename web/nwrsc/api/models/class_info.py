# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class ClassInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, classcode: str=None, descrip: str=None, modified: datetime=None, champtrophy: bool=None, eventtrophy: bool=None, countedruns: int=None, carindexed: bool=None, caridxrestrict: str=None, secondruns: bool=None, indexcode: str=None, classmultiplier: float=None, usecarflag: bool=None):  # noqa: E501
        """ClassInfo - a model defined in Swagger

        :param classcode: The classcode of this ClassInfo.  # noqa: E501
        :type classcode: str
        :param descrip: The descrip of this ClassInfo.  # noqa: E501
        :type descrip: str
        :param modified: The modified of this ClassInfo.  # noqa: E501
        :type modified: datetime
        :param champtrophy: The champtrophy of this ClassInfo.  # noqa: E501
        :type champtrophy: bool
        :param eventtrophy: The eventtrophy of this ClassInfo.  # noqa: E501
        :type eventtrophy: bool
        :param countedruns: The countedruns of this ClassInfo.  # noqa: E501
        :type countedruns: int
        :param carindexed: The carindexed of this ClassInfo.  # noqa: E501
        :type carindexed: bool
        :param caridxrestrict: The caridxrestrict of this ClassInfo.  # noqa: E501
        :type caridxrestrict: str
        :param secondruns: The secondruns of this ClassInfo.  # noqa: E501
        :type secondruns: bool
        :param indexcode: The indexcode of this ClassInfo.  # noqa: E501
        :type indexcode: str
        :param classmultiplier: The classmultiplier of this ClassInfo.  # noqa: E501
        :type classmultiplier: float
        :param usecarflag: The usecarflag of this ClassInfo.  # noqa: E501
        :type usecarflag: bool
        """
        self.swagger_types = {
            'classcode': str,
            'descrip': str,
            'modified': datetime,
            'champtrophy': bool,
            'eventtrophy': bool,
            'countedruns': int,
            'carindexed': bool,
            'caridxrestrict': str,
            'secondruns': bool,
            'indexcode': str,
            'classmultiplier': float,
            'usecarflag': bool
        }

        self.attribute_map = {
            'classcode': 'classcode',
            'descrip': 'descrip',
            'modified': 'modified',
            'champtrophy': 'champtrophy',
            'eventtrophy': 'eventtrophy',
            'countedruns': 'countedruns',
            'carindexed': 'carindexed',
            'caridxrestrict': 'caridxrestrict',
            'secondruns': 'secondruns',
            'indexcode': 'indexcode',
            'classmultiplier': 'classmultiplier',
            'usecarflag': 'usecarflag'
        }

        self._classcode = classcode
        self._descrip = descrip
        self._modified = modified
        self._champtrophy = champtrophy
        self._eventtrophy = eventtrophy
        self._countedruns = countedruns
        self._carindexed = carindexed
        self._caridxrestrict = caridxrestrict
        self._secondruns = secondruns
        self._indexcode = indexcode
        self._classmultiplier = classmultiplier
        self._usecarflag = usecarflag

    @classmethod
    def from_dict(cls, dikt) -> 'ClassInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClassInfo of this ClassInfo.  # noqa: E501
        :rtype: ClassInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classcode(self) -> str:
        """Gets the classcode of this ClassInfo.

        the letter code for the class  # noqa: E501

        :return: The classcode of this ClassInfo.
        :rtype: str
        """
        return self._classcode

    @classcode.setter
    def classcode(self, classcode: str):
        """Sets the classcode of this ClassInfo.

        the letter code for the class  # noqa: E501

        :param classcode: The classcode of this ClassInfo.
        :type classcode: str
        """

        self._classcode = classcode

    @property
    def descrip(self) -> str:
        """Gets the descrip of this ClassInfo.

        the full class description  # noqa: E501

        :return: The descrip of this ClassInfo.
        :rtype: str
        """
        return self._descrip

    @descrip.setter
    def descrip(self, descrip: str):
        """Sets the descrip of this ClassInfo.

        the full class description  # noqa: E501

        :param descrip: The descrip of this ClassInfo.
        :type descrip: str
        """

        self._descrip = descrip

    @property
    def modified(self) -> datetime:
        """Gets the modified of this ClassInfo.

        the mod time  # noqa: E501

        :return: The modified of this ClassInfo.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified: datetime):
        """Sets the modified of this ClassInfo.

        the mod time  # noqa: E501

        :param modified: The modified of this ClassInfo.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def champtrophy(self) -> bool:
        """Gets the champtrophy of this ClassInfo.

        true if this class is included in the overall championship list  # noqa: E501

        :return: The champtrophy of this ClassInfo.
        :rtype: bool
        """
        return self._champtrophy

    @champtrophy.setter
    def champtrophy(self, champtrophy: bool):
        """Sets the champtrophy of this ClassInfo.

        true if this class is included in the overall championship list  # noqa: E501

        :param champtrophy: The champtrophy of this ClassInfo.
        :type champtrophy: bool
        """

        self._champtrophy = champtrophy

    @property
    def eventtrophy(self) -> bool:
        """Gets the eventtrophy of this ClassInfo.

        true if this class get an event tropy  # noqa: E501

        :return: The eventtrophy of this ClassInfo.
        :rtype: bool
        """
        return self._eventtrophy

    @eventtrophy.setter
    def eventtrophy(self, eventtrophy: bool):
        """Sets the eventtrophy of this ClassInfo.

        true if this class get an event tropy  # noqa: E501

        :param eventtrophy: The eventtrophy of this ClassInfo.
        :type eventtrophy: bool
        """

        self._eventtrophy = eventtrophy

    @property
    def countedruns(self) -> int:
        """Gets the countedruns of this ClassInfo.

        if > 0, the limit to the number of runs that are counted for points  # noqa: E501

        :return: The countedruns of this ClassInfo.
        :rtype: int
        """
        return self._countedruns

    @countedruns.setter
    def countedruns(self, countedruns: int):
        """Sets the countedruns of this ClassInfo.

        if > 0, the limit to the number of runs that are counted for points  # noqa: E501

        :param countedruns: The countedruns of this ClassInfo.
        :type countedruns: int
        """

        self._countedruns = countedruns

    @property
    def carindexed(self) -> bool:
        """Gets the carindexed of this ClassInfo.

        true if each car in the class has its own index to apply towards times  # noqa: E501

        :return: The carindexed of this ClassInfo.
        :rtype: bool
        """
        return self._carindexed

    @carindexed.setter
    def carindexed(self, carindexed: bool):
        """Sets the carindexed of this ClassInfo.

        true if each car in the class has its own index to apply towards times  # noqa: E501

        :param carindexed: The carindexed of this ClassInfo.
        :type carindexed: bool
        """

        self._carindexed = carindexed

    @property
    def caridxrestrict(self) -> str:
        """Gets the caridxrestrict of this ClassInfo.

        formatted string that determine which indexcodes are allowed for this class  # noqa: E501

        :return: The caridxrestrict of this ClassInfo.
        :rtype: str
        """
        return self._caridxrestrict

    @caridxrestrict.setter
    def caridxrestrict(self, caridxrestrict: str):
        """Sets the caridxrestrict of this ClassInfo.

        formatted string that determine which indexcodes are allowed for this class  # noqa: E501

        :param caridxrestrict: The caridxrestrict of this ClassInfo.
        :type caridxrestrict: str
        """

        self._caridxrestrict = caridxrestrict

    @property
    def secondruns(self) -> bool:
        """Gets the secondruns of this ClassInfo.

        informational flag to indicate a class whose entrants are generally taking second runs of the day  # noqa: E501

        :return: The secondruns of this ClassInfo.
        :rtype: bool
        """
        return self._secondruns

    @secondruns.setter
    def secondruns(self, secondruns: bool):
        """Sets the secondruns of this ClassInfo.

        informational flag to indicate a class whose entrants are generally taking second runs of the day  # noqa: E501

        :param secondruns: The secondruns of this ClassInfo.
        :type secondruns: bool
        """

        self._secondruns = secondruns

    @property
    def indexcode(self) -> str:
        """Gets the indexcode of this ClassInfo.

        an index that is applied to everyone in the class  # noqa: E501

        :return: The indexcode of this ClassInfo.
        :rtype: str
        """
        return self._indexcode

    @indexcode.setter
    def indexcode(self, indexcode: str):
        """Sets the indexcode of this ClassInfo.

        an index that is applied to everyone in the class  # noqa: E501

        :param indexcode: The indexcode of this ClassInfo.
        :type indexcode: str
        """

        self._indexcode = indexcode

    @property
    def classmultiplier(self) -> float:
        """Gets the classmultiplier of this ClassInfo.

        a static multiplier that is applied to everyone in the class such as a street tire modifier  # noqa: E501

        :return: The classmultiplier of this ClassInfo.
        :rtype: float
        """
        return self._classmultiplier

    @classmultiplier.setter
    def classmultiplier(self, classmultiplier: float):
        """Sets the classmultiplier of this ClassInfo.

        a static multiplier that is applied to everyone in the class such as a street tire modifier  # noqa: E501

        :param classmultiplier: The classmultiplier of this ClassInfo.
        :type classmultiplier: float
        """

        self._classmultiplier = classmultiplier

    @property
    def usecarflag(self) -> bool:
        """Gets the usecarflag of this ClassInfo.

        true if flag in car entry must be set to apply classwide multiplier (i.e. street tire entries)  # noqa: E501

        :return: The usecarflag of this ClassInfo.
        :rtype: bool
        """
        return self._usecarflag

    @usecarflag.setter
    def usecarflag(self, usecarflag: bool):
        """Sets the usecarflag of this ClassInfo.

        true if flag in car entry must be set to apply classwide multiplier (i.e. street tire entries)  # noqa: E501

        :param usecarflag: The usecarflag of this ClassInfo.
        :type usecarflag: bool
        """

        self._usecarflag = usecarflag

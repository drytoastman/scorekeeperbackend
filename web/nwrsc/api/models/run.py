# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api import util


class Run(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, course: int=None, run: int=None, raw: float=None, cones: int=None, gates: int=None, status: str=None, pen: float=None, net: float=None, rorder: int=None, norder: int=None, arorder: int=None, anorder: int=None, modified: datetime=None):  # noqa: E501
        """Run - a model defined in Swagger

        :param course: The course of this Run.  # noqa: E501
        :type course: int
        :param run: The run of this Run.  # noqa: E501
        :type run: int
        :param raw: The raw of this Run.  # noqa: E501
        :type raw: float
        :param cones: The cones of this Run.  # noqa: E501
        :type cones: int
        :param gates: The gates of this Run.  # noqa: E501
        :type gates: int
        :param status: The status of this Run.  # noqa: E501
        :type status: str
        :param pen: The pen of this Run.  # noqa: E501
        :type pen: float
        :param net: The net of this Run.  # noqa: E501
        :type net: float
        :param rorder: The rorder of this Run.  # noqa: E501
        :type rorder: int
        :param norder: The norder of this Run.  # noqa: E501
        :type norder: int
        :param arorder: The arorder of this Run.  # noqa: E501
        :type arorder: int
        :param anorder: The anorder of this Run.  # noqa: E501
        :type anorder: int
        :param modified: The modified of this Run.  # noqa: E501
        :type modified: datetime
        """
        self.swagger_types = {
            'course': int,
            'run': int,
            'raw': float,
            'cones': int,
            'gates': int,
            'status': str,
            'pen': float,
            'net': float,
            'rorder': int,
            'norder': int,
            'arorder': int,
            'anorder': int,
            'modified': datetime
        }

        self.attribute_map = {
            'course': 'course',
            'run': 'run',
            'raw': 'raw',
            'cones': 'cones',
            'gates': 'gates',
            'status': 'status',
            'pen': 'pen',
            'net': 'net',
            'rorder': 'rorder',
            'norder': 'norder',
            'arorder': 'arorder',
            'anorder': 'anorder',
            'modified': 'modified'
        }

        self._course = course
        self._run = run
        self._raw = raw
        self._cones = cones
        self._gates = gates
        self._status = status
        self._pen = pen
        self._net = net
        self._rorder = rorder
        self._norder = norder
        self._arorder = arorder
        self._anorder = anorder
        self._modified = modified

    @classmethod
    def from_dict(cls, dikt) -> 'Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Run of this Run.  # noqa: E501
        :rtype: Run
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course(self) -> int:
        """Gets the course of this Run.

        the course number  # noqa: E501

        :return: The course of this Run.
        :rtype: int
        """
        return self._course

    @course.setter
    def course(self, course: int):
        """Sets the course of this Run.

        the course number  # noqa: E501

        :param course: The course of this Run.
        :type course: int
        """

        self._course = course

    @property
    def run(self) -> int:
        """Gets the run of this Run.

        the run number  # noqa: E501

        :return: The run of this Run.
        :rtype: int
        """
        return self._run

    @run.setter
    def run(self, run: int):
        """Sets the run of this Run.

        the run number  # noqa: E501

        :param run: The run of this Run.
        :type run: int
        """

        self._run = run

    @property
    def raw(self) -> float:
        """Gets the raw of this Run.

        the raw time from the timer  # noqa: E501

        :return: The raw of this Run.
        :rtype: float
        """
        return self._raw

    @raw.setter
    def raw(self, raw: float):
        """Sets the raw of this Run.

        the raw time from the timer  # noqa: E501

        :param raw: The raw of this Run.
        :type raw: float
        """

        self._raw = raw

    @property
    def cones(self) -> int:
        """Gets the cones of this Run.

        the number of cones hit  # noqa: E501

        :return: The cones of this Run.
        :rtype: int
        """
        return self._cones

    @cones.setter
    def cones(self, cones: int):
        """Sets the cones of this Run.

        the number of cones hit  # noqa: E501

        :param cones: The cones of this Run.
        :type cones: int
        """

        self._cones = cones

    @property
    def gates(self) -> int:
        """Gets the gates of this Run.

        the number of gates missed  # noqa: E501

        :return: The gates of this Run.
        :rtype: int
        """
        return self._gates

    @gates.setter
    def gates(self, gates: int):
        """Sets the gates of this Run.

        the number of gates missed  # noqa: E501

        :param gates: The gates of this Run.
        :type gates: int
        """

        self._gates = gates

    @property
    def status(self) -> str:
        """Gets the status of this Run.

        the run status such as OK, DNF, DNS, etc  # noqa: E501

        :return: The status of this Run.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Run.

        the run status such as OK, DNF, DNS, etc  # noqa: E501

        :param status: The status of this Run.
        :type status: str
        """

        self._status = status

    @property
    def pen(self) -> float:
        """Gets the pen of this Run.

        the raw time with just penalties applied  # noqa: E501

        :return: The pen of this Run.
        :rtype: float
        """
        return self._pen

    @pen.setter
    def pen(self, pen: float):
        """Sets the pen of this Run.

        the raw time with just penalties applied  # noqa: E501

        :param pen: The pen of this Run.
        :type pen: float
        """

        self._pen = pen

    @property
    def net(self) -> float:
        """Gets the net of this Run.

        the net time including penalties and indexing, NOTE: the time displayed will be rounded to .001  # noqa: E501

        :return: The net of this Run.
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net: float):
        """Sets the net of this Run.

        the net time including penalties and indexing, NOTE: the time displayed will be rounded to .001  # noqa: E501

        :param net: The net of this Run.
        :type net: float
        """

        self._net = net

    @property
    def rorder(self) -> int:
        """Gets the rorder of this Run.

        the run order compared to other runs on this course using the raw time of COUNTED runs, 1 is best  # noqa: E501

        :return: The rorder of this Run.
        :rtype: int
        """
        return self._rorder

    @rorder.setter
    def rorder(self, rorder: int):
        """Sets the rorder of this Run.

        the run order compared to other runs on this course using the raw time of COUNTED runs, 1 is best  # noqa: E501

        :param rorder: The rorder of this Run.
        :type rorder: int
        """

        self._rorder = rorder

    @property
    def norder(self) -> int:
        """Gets the norder of this Run.

        the run order compared to other runs on this course using the net time of COUNTED runs, 1 is best  # noqa: E501

        :return: The norder of this Run.
        :rtype: int
        """
        return self._norder

    @norder.setter
    def norder(self, norder: int):
        """Sets the norder of this Run.

        the run order compared to other runs on this course using the net time of COUNTED runs, 1 is best  # noqa: E501

        :param norder: The norder of this Run.
        :type norder: int
        """

        self._norder = norder

    @property
    def arorder(self) -> int:
        """Gets the arorder of this Run.

        the run order compared to other runs on this course using the raw time of ALL runs, 1 is best  # noqa: E501

        :return: The arorder of this Run.
        :rtype: int
        """
        return self._arorder

    @arorder.setter
    def arorder(self, arorder: int):
        """Sets the arorder of this Run.

        the run order compared to other runs on this course using the raw time of ALL runs, 1 is best  # noqa: E501

        :param arorder: The arorder of this Run.
        :type arorder: int
        """

        self._arorder = arorder

    @property
    def anorder(self) -> int:
        """Gets the anorder of this Run.

        the run order compared to other runs on this course using the net time of ALL runs, 1 is best  # noqa: E501

        :return: The anorder of this Run.
        :rtype: int
        """
        return self._anorder

    @anorder.setter
    def anorder(self, anorder: int):
        """Sets the anorder of this Run.

        the run order compared to other runs on this course using the net time of ALL runs, 1 is best  # noqa: E501

        :param anorder: The anorder of this Run.
        :type anorder: int
        """

        self._anorder = anorder

    @property
    def modified(self) -> datetime:
        """Gets the modified of this Run.

        the mod time  # noqa: E501

        :return: The modified of this Run.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified: datetime):
        """Sets the modified of this Run.

        the mod time  # noqa: E501

        :param modified: The modified of this Run.
        :type modified: datetime
        """

        self._modified = modified

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nwrsc.api.models.base_model_ import Model
from nwrsc.api.models.round_entry import RoundEntry  # noqa: F401,E501
from nwrsc.api import util


class ChallengeRound(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, round: int=None, top: RoundEntry=None, bottom: RoundEntry=None, winner: str=None, detail: str=None):  # noqa: E501
        """ChallengeRound - a model defined in Swagger

        :param round: The round of this ChallengeRound.  # noqa: E501
        :type round: int
        :param top: The top of this ChallengeRound.  # noqa: E501
        :type top: RoundEntry
        :param bottom: The bottom of this ChallengeRound.  # noqa: E501
        :type bottom: RoundEntry
        :param winner: The winner of this ChallengeRound.  # noqa: E501
        :type winner: str
        :param detail: The detail of this ChallengeRound.  # noqa: E501
        :type detail: str
        """
        self.swagger_types = {
            'round': int,
            'top': RoundEntry,
            'bottom': RoundEntry,
            'winner': str,
            'detail': str
        }

        self.attribute_map = {
            'round': 'round',
            'top': 'top',
            'bottom': 'bottom',
            'winner': 'winner',
            'detail': 'detail'
        }

        self._round = round
        self._top = top
        self._bottom = bottom
        self._winner = winner
        self._detail = detail

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeRound':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeRound of this ChallengeRound.  # noqa: E501
        :rtype: ChallengeRound
        """
        return util.deserialize_model(dikt, cls)

    @property
    def round(self) -> int:
        """Gets the round of this ChallengeRound.

        the round number, 1 is the final, 2 and 3 are the semifinals, etc. 99 is 3rd place run off  # noqa: E501

        :return: The round of this ChallengeRound.
        :rtype: int
        """
        return self._round

    @round.setter
    def round(self, round: int):
        """Sets the round of this ChallengeRound.

        the round number, 1 is the final, 2 and 3 are the semifinals, etc. 99 is 3rd place run off  # noqa: E501

        :param round: The round of this ChallengeRound.
        :type round: int
        """

        self._round = round

    @property
    def top(self) -> RoundEntry:
        """Gets the top of this ChallengeRound.

        the top entrant  # noqa: E501

        :return: The top of this ChallengeRound.
        :rtype: RoundEntry
        """
        return self._top

    @top.setter
    def top(self, top: RoundEntry):
        """Sets the top of this ChallengeRound.

        the top entrant  # noqa: E501

        :param top: The top of this ChallengeRound.
        :type top: RoundEntry
        """

        self._top = top

    @property
    def bottom(self) -> RoundEntry:
        """Gets the bottom of this ChallengeRound.

        the bottom entrant  # noqa: E501

        :return: The bottom of this ChallengeRound.
        :rtype: RoundEntry
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom: RoundEntry):
        """Sets the bottom of this ChallengeRound.

        the bottom entrant  # noqa: E501

        :param bottom: The bottom of this ChallengeRound.
        :type bottom: RoundEntry
        """

        self._bottom = bottom

    @property
    def winner(self) -> str:
        """Gets the winner of this ChallengeRound.


        :return: The winner of this ChallengeRound.
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner: str):
        """Sets the winner of this ChallengeRound.


        :param winner: The winner of this ChallengeRound.
        :type winner: str
        """

        self._winner = winner

    @property
    def detail(self) -> str:
        """Gets the detail of this ChallengeRound.


        :return: The detail of this ChallengeRound.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this ChallengeRound.


        :param detail: The detail of this ChallengeRound.
        :type detail: str
        """

        self._detail = detail

---
# This compose file is meant for development purposes
# It mounts the local user's directory and creates a link in the web container
# so that it uses the local copy of the web service

version: '3.2'
services:

  web:
    image:   "drytoastman/scweb:${TRAVIS_TAG:-latest}"
    build:   "web"
    container_name: "web"
    command: "ash -c 'pip install -e /code && exec webserver.py'"
    environment:
        - UI_TIME_ZONE=US/Pacific
        - DEBUG=1
        - LOG_LEVEL=DEBUG
        - WERKZEUG_DEBUG_PIN=off
        - SUPER_ADMIN_PASSWORD=testing
        - IS_MAIN_SERVER=1
        - SQ_APPLICATION_ID
        - SQ_APPLICATION_SECRET
        - MAIL_SERVER
        - MAIL_DEFAULT_SENDER
    volumes:  
        - "dbsocket:/var/run/postgresql"
        - "logs:/var/log"
        - "./web:/code"
    networks:
        net1:
    ports:
        - "80:80"  # Web for all

  db:
    image:   "drytoastman/scdb:${TRAVIS_TAG:-latest}"
    build:   "db"
    container_name: "db"
    environment:
        - UI_TIME_ZONE=US/Pacific
    volumes:  
        - "database:/var/lib/postgresql/data"
        - "dbsocket:/var/run/postgresql"
        - "logs:/var/log"
    networks:
        net1:
    ports:
        - "54329:5432" # DB for external SSL connections
        - "127.0.0.1:6432:6432" # DB for trusted localhost

  sync:
    image:   "drytoastman/scsync:${TRAVIS_TAG:-latest}"
    build:   "sync"
    container_name: "sync"
    command: "ash -c 'pip install -e /code && exec syncserver.py'"
    environment:
        - UI_TIME_ZONE=US/Pacific
        - DEBUG=1
        - LOG_LEVEL=DEBUG
    volumes:
        - "dbsocket:/var/run/postgresql"
        - "logs:/var/log"
        - "./sync:/code"
    networks:
        net1:


networks:
  # create a separate network from the default
  net1:
    external:
      name: "scnet"

volumes:

  # for long term storage of database/config
  database:
    external:
      name: "scdatabase-latest"

  # for long term storage of logging data
  logs:
    external:
      name: "sclogs-latest"

  # for sharing of database unix socket across containers
  dbsocket:
    external:
      name: "scsocket"


